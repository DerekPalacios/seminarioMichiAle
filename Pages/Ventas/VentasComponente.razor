@page "/facturas/{IdFactura:int}"

@page "/facturas/add"
<div class="container-fluid">
    <div class="card">
        <div class="card-header">
            <div class="float-right">
                <ClienteModal/>
                <a href="/facturas" class="btn btn-secondary">Volver</a>
            </div>
            <h4>Factura</h4>
        </div>
        <div class="card-body">

            <EditForm Model="Model" OnValidSubmit="GuardarFactura">
                <div class="row">

                    <div class="col-md-3">
                        <label>Fecha</label>
                        <input type="date" class="form-control" @bind="Model.Fecha" />
                    </div>
                    <div class="col-md-3">
                        <label>N° Factura</label>
                        <input type="number" class="form-control" @bind="Model.Numero" />
                    </div>
                    <div class="col-md-6">
                        <label>Cliente</label>
                        <select class="form-control" @bind="Model.IdCliente">
                            @if (ListaClientes != null)
                            {
                                @foreach (var item in ListaClientes)
                                {
                                    <option value="@item.Id">@item.NombreCompleto</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <label>Dirección</label>
                        <span class="form-control">@ListaClientes.FirstOrDefault(x => x.Id == Model.IdCliente)?.Direccion</span>
                    </div>
                    <div class="col-md-3">
                        <label>Teléfono</label>
                        <span class="form-control">@ListaClientes.FirstOrDefault(x => x.Id == Model.IdCliente)?.Telefono</span>
                    </div>

                    <div class="col-md-5">
                        <label>Email</label>
                        <div class="input-group">
                            <span class="form-control">@ListaClientes.FirstOrDefault(x => x.Id == Model.IdCliente)?.Correo</span>
                            <div class="input-group-append">
                                @*<button type="submit" class="btn btn-primary ">Crear Factura</button>*@
                                <button type="submit" class="btn btn-success">Guardar Factura</button>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>

            <hr />
            @if (ItemFactura.IdVenta != -1)
            {
                <div class="row mb-3">
                    <div class="col-md-2">
                        <label>Buscar</label>
                        <input type="text" style="text-transform:uppercase" class="form-control"  @onchange="BuscarProducto" />
                    </div>
                    <div class="col-md-12">

                        <EditForm Model="ItemFactura" OnValidSubmit="AgregarItemFactura">
                            <div class="row">

                                <DataAnnotationsValidator></DataAnnotationsValidator>

                                <div class="col-md-2">
                                    <label>Referencia</label>
                                    <span class="form-control">@ItemFactura.Codigo</span>
                                    <ValidationMessage For="(() => ItemFactura.Codigo)" />
                                </div>
                                <div class="col-md-4">
                                    <label>Artículo</label>
                                    <span class="form-control">@ItemFactura.NombreArticulo</span>
                                </div>
                                <div class="col-md-2">
                                    <label>Stock</label>
                                    <input type="text" placeholder="Stock" class="form-control" @bind="ItemFactura.Stock" />
                                </div>
                                <div class="col-md-2">
                                    <label>Cantidad</label>
                                    <input type="number" min="1" pattern="^[0-9]+" class="form-control" @bind="ItemFactura.Cantidad" />
                                </div>
                                <div class="col-md-2">
                                    <label>Resultado</label>
                                    <span class="form-control"> @ItemFactura.Resultado.ToString()</span>
                                </div>

                                <div class="col-md-4">
                                    <label>Precio</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" @bind="ItemFactura.Precio" />
                                        <div class="input-group-append">
                                            <button type="submit" class="btn btn-primary">Agregar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </EditForm>

                    </div>

                </div>
                <div class="row">
                    <div class="col-12">

                        <table class="table table-bordered table-sm">
                            <thead>
                                <tr>
                                    <th>Codigo</th>
                                    <th>Nombre</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                    <th>SubTotal</th>
                                    <th>Margen</th>
                                    <th>Opciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Items)
                                {
                                    <tr>
                                        <td>@item.Codigo</td>
                                        <td>@item.NombreArticulo</td>
                                        <td class="text-right">
                                            <input type="number" class="form-control" @bind="item.Cantidad" />
                                        </td>
                                        <td class="text-right">
                                            @item.Precio.ToString("c2")
                                        </td>
                                        <td class="text-right">@item.Subtotal.ToString("c2")</td>
                                        <td class="text-right">@item.Margen.ToString("c2")</td>
                                        <th>
                                            <div class="input-group-append">
                                                <button class="btn btn-danger" @onclick="(() => EliminarProducto(item))"><i class='bx bx-trash'></i></button>
                                            </div>
                                        </th>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th colspan="4" class="text-right">TOTAL</th>
                                    <th class="text-right">@Model.Total.ToString("c2")</th>
                                    <th class="text-right">@Model.Ganancia.ToString("c2")</th>

                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<ToastContainer />

@inject VentaService facturaService
@inject ClienteService clientesService
@inject ArticuloService productoService

@inject IToaster toaster
@inject SweetAlertService swal

@code {

    [Parameter]
    public int? IdFactura { get; set; }

    public VentaModel Model { get; set; }
    public ItemFacturaModel ItemFactura { get; set; } = new ItemFacturaModel();



    //variable que guarda una lista de los items de la factura antes de que sean modificados
    private List<ItemFacturaModel> listaAnteriorModificacion { get; set; }

    public List<ClienteModel> ListaClientes { get; set; }



    protected override void OnInitialized()
    {
        CargarFactura();

        ListaClientes = clientesService.ListaClientes();

    }

    protected void CargarFactura()
    {
        if (IdFactura == null)
        {
            Model = new VentaModel()
            {
                Id = -1,
                Fecha = DateTime.Now,
            };
            ItemFactura.IdVenta = -1;
        }
        else
        {
            Model = facturaService.Factura(Convert.ToInt32(IdFactura));
            listaAnteriorModificacion = facturaService.Factura(Convert.ToInt32(IdFactura)).Items;
            ItemFactura.IdVenta = Convert.ToInt32(IdFactura);
        }
    }

    protected void GuardarFactura()
    {
        var res = new MsgResult();

        if (Model.Id == -1)
        {
            res = CrearFactura();

            if (res.IsSuccess)
            {
                Model.Id = res.Code;
                ItemFactura.IdVenta = res.Code;
            }
        }
        else
        {
            res = ModificarFactura();
        }

        if (res.IsSuccess)
        {
            toaster.Success(res.Message, "OK");

        }
        else
        {
            toaster.Error(res.Message, "Error");
        }
    }

    protected MsgResult CrearFactura()
    {
        return facturaService.Crear(Model);
    }


    protected MsgResult ModificarFactura()
    {
        //envio extra de una lista de items que el modelo tenia antes de que se modificara en la vista
        return facturaService.Modificar(Model, listaAnteriorModificacion);
    }

    protected void BuscarProducto(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value.ToString()))
        {
            return;
        }

        var producto = productoService.Articulo(e.Value.ToString());
        if (producto == null)
        {
            toaster.Info("Producto no encontrado", "Info");
            return;
        }

        ItemFactura = new ItemFacturaModel
        {
            Id = producto.Id,
            //asignacion del id al item producto

            Cantidad = 1,
            Costo = producto.Costo,
            IdVenta = Model.Id,
            IdArticulo = producto.Id,
            NombreArticulo = producto.Nombre,
            Precio = producto.Precio,
            Codigo = producto.Codigo,
            Stock = producto.Stock,
        };
    }



    //agrega item a la lista de items del modelo y por ello a la grid
    protected void AgregarItemFactura()
    {
        //var res = facturaService.AgregarProducto(ItemFactura);
        //if (res.IsSuccess)
        //{
        //ItemFactura.Id = res.Code;            --tambien asignacion de id al item producto

        Model.Items.Add(ItemFactura);
        ItemFactura = new ItemFacturaModel();

        //    }
        //else
        //{
        //    toaster.Error(res.Message, "Error");
        //}
    }


    protected async Task EliminarProducto(ItemFacturaModel item)
    {
        var confirm = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Confirma que desea eliminar este Artículo de la Factura?",
            Text = "Si lo elimina, no podrá recuperarlo",
            ShowConfirmButton = true,
            ConfirmButtonText = "Si, eliminar",
            ShowCancelButton = true,
            CancelButtonText = "No, eliminar"
        });

        if (!confirm.IsConfirmed)
        {
            return;
        }

        var res = facturaService.EliminarProducto(item);
        if (res.IsSuccess)
        {
            toaster.Success(res.Message, "OK");
            Model.Items.Remove(item);
        }
        else
        {
            toaster.Error(res.Message, "OK");
        }
    }

    /// <summary>
    /// 
    /// </summary>

    public ClienteModel Cliente { get; set; } = new ClienteModel();


}
