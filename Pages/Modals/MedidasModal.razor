@page "/ModalMedidas"



<BSButton Color="Color.Primary" @onclick="@onToggle">Agregar Tamaño</BSButton>
<BSModal @ref="VerticallyCentered" IsCentered="true">
    <BSModalHeader OnClick="@onToggle">Nuevo Tamaño</BSModalHeader>
    <BSModalBody>
        <div class="container">
            <div class="row mb-3">
                <div class="col">
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="Model.Nombre_Medida" />
                        <div class="input-group-append">
                            <button class="btn btn-primary" @onclick="AgregarMedida">Agregar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Secondary" @onclick="@onToggle">Cerrar</BSButton>
        @*<BSButton Color="Color.Primary" @onclick="@CrearCliente">Guardar</BSButton>*@
    </BSModalFooter>
</BSModal>
<ToastContainer />



@inject MedidaService medidaService
@inject IToaster toaster
@inject SweetAlertService swal

@code {

    BSModal VerticallyCentered;

    void onToggle(/*MouseEventArgs e*/)
    {
        VerticallyCentered.Toggle();
        Model = new MedidaModel();
    }

    public MedidaModel Model { get; set; } = new MedidaModel();

    public List<MedidaModel> ListaMedidas { get; set; } = new List<MedidaModel>();

    protected override void OnInitialized()
    {
        CargarMedida();
        //otros metodos
    }

    protected void CargarMedida()
    {
        var result = medidaService.ListaMedidas();
        ListaMedidas = result;
    }

    protected void AgregarMedida()
    {
        var result = medidaService.Crear(Model);
        if (result.IsSuccess)
        {
            Model.Id = result.Code;
            Model.CantidadArticulos = 0;



            ListaMedidas.Add(Model);

            Model = new MedidaModel();
            toaster.Success(result.Message, "OK");
        }
        else
        {
            toaster.Error(result.Message, "Error");
        }

    }

    protected void ModificarMedida(MedidaModel etapa)
    {
        var result = medidaService.Modificar(etapa);
        if (result.IsSuccess)
        {
            toaster.Success(result.Message, "OK");
        }
        else
        {
            toaster.Error(result.Message, "Error");
        }

    }

    protected async Task EliminarMedida(int idmedida)
    {
        var res = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Confirma que desea eliminar este dato?",
            Text = "Si la elimina, no podrá recuperarlo",
            ShowConfirmButton = true,
            ConfirmButtonText = "Si, eliminar",
            ShowCancelButton = true,
            CancelButtonText = "No, eliminar"
        });

        if (!res.IsConfirmed)
        {
            return;
        }

        var result = medidaService.Eliminar(idmedida);

        if (result.IsSuccess)
        {
            CargarMedida();
            toaster.Success(result.Message, "OK");
        }
        else
        {
            toaster.Error(result.Message, "Error");
        }


    }
}